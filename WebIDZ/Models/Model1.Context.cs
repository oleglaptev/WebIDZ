//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebIDZ.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IDZEntities1 : DbContext
    {
        public IDZEntities1()
            : base("name=IDZEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Мастер> Мастер { get; set; }
        public virtual DbSet<Оборудование> Оборудование { get; set; }
        public virtual DbSet<Работа> Работа { get; set; }
        public virtual DbSet<Ремонты_и_техобслуживания> Ремонты_и_техобслуживания { get; set; }
        public virtual DbSet<Тип_оборудования> Тип_оборудования { get; set; }
        public virtual DbSet<Пользователи> Пользователи { get; set; }
    
        public virtual ObjectResult<ЗапланироватьТехобслуживание_Result> ЗапланироватьТехобслуживание(Nullable<int> количествоЛет, Nullable<System.Guid> iD_оборудования)
        {
            var количествоЛетParameter = количествоЛет.HasValue ?
                new ObjectParameter("КоличествоЛет", количествоЛет) :
                new ObjectParameter("КоличествоЛет", typeof(int));
    
            var iD_оборудованияParameter = iD_оборудования.HasValue ?
                new ObjectParameter("ID_оборудования", iD_оборудования) :
                new ObjectParameter("ID_оборудования", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ЗапланироватьТехобслуживание_Result>("ЗапланироватьТехобслуживание", количествоЛетParameter, iD_оборудованияParameter);
        }
    
        public virtual int ЗаявкаНаРемонт(Nullable<int> инвентарный_номер, string фамилия, string имя, string отчество, string список_работ)
        {
            var инвентарный_номерParameter = инвентарный_номер.HasValue ?
                new ObjectParameter("Инвентарный_номер", инвентарный_номер) :
                new ObjectParameter("Инвентарный_номер", typeof(int));
    
            var фамилияParameter = фамилия != null ?
                new ObjectParameter("Фамилия", фамилия) :
                new ObjectParameter("Фамилия", typeof(string));
    
            var имяParameter = имя != null ?
                new ObjectParameter("Имя", имя) :
                new ObjectParameter("Имя", typeof(string));
    
            var отчествоParameter = отчество != null ?
                new ObjectParameter("Отчество", отчество) :
                new ObjectParameter("Отчество", typeof(string));
    
            var список_работParameter = список_работ != null ?
                new ObjectParameter("Список_работ", список_работ) :
                new ObjectParameter("Список_работ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ЗаявкаНаРемонт", инвентарный_номерParameter, фамилияParameter, имяParameter, отчествоParameter, список_работParameter);
        }
    
        public virtual int ОтчетПоРемонту(string имя, string фамилия, string отчество, Nullable<System.Guid> iD_оборудования, string перечень_работ)
        {
            var имяParameter = имя != null ?
                new ObjectParameter("Имя", имя) :
                new ObjectParameter("Имя", typeof(string));
    
            var фамилияParameter = фамилия != null ?
                new ObjectParameter("Фамилия", фамилия) :
                new ObjectParameter("Фамилия", typeof(string));
    
            var отчествоParameter = отчество != null ?
                new ObjectParameter("Отчество", отчество) :
                new ObjectParameter("Отчество", typeof(string));
    
            var iD_оборудованияParameter = iD_оборудования.HasValue ?
                new ObjectParameter("ID_оборудования", iD_оборудования) :
                new ObjectParameter("ID_оборудования", typeof(System.Guid));
    
            var перечень_работParameter = перечень_работ != null ?
                new ObjectParameter("Перечень_работ", перечень_работ) :
                new ObjectParameter("Перечень_работ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ОтчетПоРемонту", имяParameter, фамилияParameter, отчествоParameter, iD_оборудованияParameter, перечень_работParameter);
        }
    }
}
